# MAJOR CHANGES

## Switching to `impworld`

We chose to switch to `impworld` because we found that we were repeating a lot of code when
constructing vehicles, and this could be removed by mutating data on abstract types. Also,
it eased the process of dealing with scoring, since we could have mutable scorekeeper and action
tracker objects. We could then pass these objects as fields of our function objects, allowing us
to map over our vehicles while mutating them.

## Implementing Klotski

To implement Klotski, we chose to keep our code as tightly coupled with our Rush Hour code as 
possible. To do this, we abstracted functionality common to all movable objects via our AMovable
class, and modified AVehicle and ABox (our new abstract class for Klotski boxes) to extend this
class. This enabled us to layer extra checks on existing methods in our subclasses. For instance,
when invoking the `move` method on AVehicle, we check that we are facing the right direction before
invoking the method on `super`. Similarly, for normal boxes, we check that we are not going to
collide with an exit.

As a result of this abstraction, it is fully possible to create levels with Klotski boxes and Rush
Hour cars at the same time. The Level class simply contains a list of `IMovable`s, which may be
Klotski boxes _or_ Rush Hour cars. Since they all share the same interface, they are able to move,
collide with each other, and register the same events, despite their individual restrictions.